// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: general-queries.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const getDeviceList = `-- name: GetDeviceList :many
SELECT id, device_name, location, ip_address, device_type_id FROM device_list
`

func (q *Queries) GetDeviceList(ctx context.Context) ([]DeviceList, error) {
	rows, err := q.db.Query(ctx, getDeviceList)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []DeviceList
	for rows.Next() {
		var i DeviceList
		if err := rows.Scan(
			&i.ID,
			&i.DeviceName,
			&i.Location,
			&i.IpAddress,
			&i.DeviceTypeID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getDeviceListByDeviceTypeId = `-- name: GetDeviceListByDeviceTypeId :many
SELECT 
    dl.device_name,
    dl.location,
    dl.ip_address,
    dl.device_type_id
FROM device_list dl 
WHERE dl.device_type_id = $1
`

type GetDeviceListByDeviceTypeIdRow struct {
	DeviceName   string      `db:"device_name" json:"device_name"`
	Location     pgtype.Text `db:"location" json:"location"`
	IpAddress    pgtype.Text `db:"ip_address" json:"ip_address"`
	DeviceTypeID int32       `db:"device_type_id" json:"device_type_id"`
}

func (q *Queries) GetDeviceListByDeviceTypeId(ctx context.Context, deviceTypeID int32) ([]GetDeviceListByDeviceTypeIdRow, error) {
	rows, err := q.db.Query(ctx, getDeviceListByDeviceTypeId, deviceTypeID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetDeviceListByDeviceTypeIdRow
	for rows.Next() {
		var i GetDeviceListByDeviceTypeIdRow
		if err := rows.Scan(
			&i.DeviceName,
			&i.Location,
			&i.IpAddress,
			&i.DeviceTypeID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getDeviceListByDeviceTypeName = `-- name: GetDeviceListByDeviceTypeName :many
SELECT 
    dl.id,
    dl.device_name,
    dl.location,
    dl.ip_address,
    dl.device_type_id
FROM device_list dl 
INNER JOIN device_types dt ON dl.device_type_id = dt.id
WHERE dt.device_type = $1
`

func (q *Queries) GetDeviceListByDeviceTypeName(ctx context.Context, deviceType string) ([]DeviceList, error) {
	rows, err := q.db.Query(ctx, getDeviceListByDeviceTypeName, deviceType)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []DeviceList
	for rows.Next() {
		var i DeviceList
		if err := rows.Scan(
			&i.ID,
			&i.DeviceName,
			&i.Location,
			&i.IpAddress,
			&i.DeviceTypeID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
